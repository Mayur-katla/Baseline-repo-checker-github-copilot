import React from 'react';
import { FiAlertTriangle, FiPackage, FiShield } from 'react-icons/fi';

export function SeverityBadge({ severity = 'unknown', dataTestId }) {
  const sev = String(severity || '').toLowerCase();
  const map = {
    critical: 'bg-red-600/20 text-red-700 dark:text-red-300 border-red-500/50',
    high: 'bg-red-600/20 text-red-700 dark:text-red-300 border-red-500/50',
    moderate: 'bg-yellow-500/20 text-yellow-800 dark:text-yellow-300 border-yellow-500/50',
    medium: 'bg-yellow-500/20 text-yellow-800 dark:text-yellow-300 border-yellow-500/50',
    low: 'bg-blue-500/20 text-blue-700 dark:text-blue-300 border-blue-500/50',
    unknown: 'bg-gray-200/60 text-gray-700 dark:bg-gray-700/20 dark:text-gray-300 border-gray-300 dark:border-gray-600/50',
  };
  const emojiMap = {
    critical: 'ðŸ›‘',
    high: 'ðŸ”´',
    moderate: 'ðŸŸ ',
    medium: 'ðŸŸ ',
    low: 'ðŸŸ¢',
    unknown: 'âšª',
  };
  const cls = map[sev] || map.unknown;
  const emoji = emojiMap[sev] || emojiMap.unknown;
  return <span aria-label={`severity ${sev}`} data-testid={dataTestId || undefined} className={`text-xs px-2 py-1 rounded-full border ${cls}`}>{emoji} {severity}</span>;
}

function VulnItem({ v }) {
  const name = v.module_name || v.name || v.package || v.dependency || 'Unknown Package';
  const title = v.title || v.problem || v.advisoryTitle || (Array.isArray(v.via) ? v.via[0] : '') || 'Security vulnerability';
  const severity = v.severity || v.level || 'unknown';
  const range = v.range || v.vulnerable_versions || v.version || '';
  const fix = (v.fixAvailable && typeof v.fixAvailable === 'object' && v.fixAvailable.name) ? `${v.fixAvailable.name}@${v.fixAvailable.version}` : (v.fixAvailable ? 'Available' : 'N/A');

  return (
    <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-md rounded-xl p-4 border border-gray-200 dark:border-gray-700/50">
      <div className="flex items-start justify-between">
        <div className="flex items-center gap-3">
          <FiPackage className="text-indigo-600 dark:text-indigo-400" />
          <div>
            <p className="text-gray-900 dark:text-white font-semibold">{name}</p>
            <p className="text-xs text-gray-600 dark:text-gray-400">Affected: {range || 'unknown'}</p>
          </div>
        </div>
        <SeverityBadge severity={severity} />
      </div>
      <p className="text-sm text-gray-700 dark:text-gray-300 mt-2">{title}</p>
      <div className="mt-2 text-xs text-gray-600 dark:text-gray-400 flex gap-4">
        <span className="flex items-center gap-1"><FiShield /> Fix: {String(fix)}</span>
        {Array.isArray(v.via) && v.via.length > 1 && (
          <span>via: {v.via.join(', ')}</span>
        )}
      </div>
    </div>
  );
}

export default function VulnerabilityList({ data }) {
  // Accept both top-level list or nested under securityAndPerformance
  const vulnerabilities = Array.isArray(data)
    ? data
    : Array.isArray(data?.securityAndPerformance?.securityVulnerabilities)
      ? data.securityAndPerformance.securityVulnerabilities
      : [];

  if (!vulnerabilities || vulnerabilities.length === 0) {
    return null;
  }

  return (
    <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-md rounded-2xl p-6 border border-gray-200 dark:border-gray-700/50 mt-8">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
        <FiAlertTriangle className="mr-3 text-indigo-600 dark:text-indigo-400" />
        Vulnerabilities
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {vulnerabilities.map((v, idx) => (
          <VulnItem key={idx} v={v} />
        ))}
      </div>
    </div>
  );
}